import { IHttpErrorMapper } from 'application/dataAccess'
import { NextFunction, Request, Response } from 'express'
import { ValidateError } from 'tsoa'
import { container } from 'tsyringe'

/**
 * Failsafe middleware if for any reason an exception it mistakenly thrown from a Controller endpoint
 */
const httpErrorMapper: IHttpErrorMapper = container.resolve('IHttpErrorMapper')

export const errorMiddleware = (error: Error, request: Request, response: Response, next: NextFunction) => {
  /**
   * TSOA automatically validates json input based on the swagger.json generated by controllers.
   * The ValidateError is thrown if a users request is invalid in comparison to the swagger/open api specs
   */
  if (error instanceof ValidateError) {
    console.warn(`Caught TSOA API Validation Error for ${request.path}:`, error.fields)
    console.warn(error)
    return response.status(422).json({
      message: 'Validation Failed',
      details: error?.fields
    })
  }

  const httpError = httpErrorMapper.mapApplicationErrorToHttpError(error)

  return response.status(httpError.status).json(httpError)
}
